<?php

/**
 * SsrfVulnerability - Server-Side Request Forgery (SSRF)
 * 
 * 服务端请求伪造漏洞演示，展示不同安全等级的URL访问控制
 * 
 * Category: VulnerabilityCategory.INJECTION
 * Severity: SeverityLevel.HIGH
 * 
 * WARNING: This code contains intentional security vulnerabilities for educational purposes only.
 * DO NOT use this code in production environments.
 */

namespace Wangyihang\VulnerablePhpLib;

/**
 * Server-Side Request Forgery (SSRF)
 * 
 * 服务端请求伪造漏洞演示，展示不同安全等级的URL访问控制
 */
class SsrfVulnerability
{
    /**
     * 不安全的URL获取 - 无任何URL校验
     * 
     * Severity: SeverityLevel.CRITICAL
     * 
     * @param string $url 目标URL
     * @return string
     */
    public function unsafeFetch(string $url): string
    {
        // 危险：直接访问用户指定的URL，无任何校验
        $content = file_get_contents($url);
        return $content ?: 'Failed to fetch content';
    }
    /**
     * 弱校验URL获取 - 仅检查http/https协议
     * 
     * Severity: SeverityLevel.HIGH
     * 
     * @param string $url 目标URL
     * @return string
     */
    public function weakFetch(string $url): string
    {
        // 危险：仅检查协议，仍可访问内网
        if (!preg_match('/^https?:\/\//', $url)) {
            return 'Invalid URL protocol';
        }
        $content = file_get_contents($url);
        return $content ?: 'Failed to fetch content';
    }
    /**
     * 中等校验URL获取 - 检查内网IP段
     * 
     * Severity: SeverityLevel.MEDIUM
     * 
     * @param string $url 目标URL
     * @return string
     */
    public function mediumFetch(string $url): string
    {
        // 危险：检查部分内网IP，但仍有绕过方法
        $parsed = parse_url($url);
        if (!$parsed || !isset($parsed['host'])) {
            return 'Invalid URL';
        }
        $host = $parsed['host'];
        $private_ips = ['127.0.0.1', 'localhost', '10.', '192.168.', '172.16.'];
        foreach ($private_ips as $private_ip) {
            if (strpos($host, $private_ip) === 0) {
                return 'Private network access denied';
            }
        }
        $content = file_get_contents($url);
        return $content ?: 'Failed to fetch content';
    }
    /**
     * 强校验URL获取 - 白名单域名验证
     * 
     * Severity: SeverityLevel.LOW
     * 
     * @param string $url 目标URL
     * @return string
     */
    public function strongFetch(string $url): string
    {
        // 相对安全：使用白名单验证
        $parsed = parse_url($url);
        if (!$parsed || !isset($parsed['host'])) {
            return 'Invalid URL';
        }
        $allowed_domains = ['api.github.com', 'api.example.com', 'public-api.com'];
        $host = $parsed['host'];
        $allowed = false;
        foreach ($allowed_domains as $domain) {
            if ($host === $domain || strpos($host, '.' . $domain) !== false) {
                $allowed = true;
                break;
            }
        }
        if (!$allowed) {
            return 'Domain not allowed';
        }
        $content = file_get_contents($url);
        return $content ?: 'Failed to fetch content';
    }
} 