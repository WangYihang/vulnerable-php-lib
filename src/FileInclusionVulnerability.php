<?php

/**
 * FileInclusionVulnerability - File Inclusion
 * 
 * 任意文件包含漏洞演示，展示不同安全等级的文件路径控制
 * 
 * Category: VulnerabilityCategory.INJECTION
 * Severity: SeverityLevel.HIGH
 * 
 * WARNING: This code contains intentional security vulnerabilities for educational purposes only.
 * DO NOT use this code in production environments.
 */

namespace Wangyihang\VulnerablePhpLib;

/**
 * File Inclusion
 * 
 * 任意文件包含漏洞演示，展示不同安全等级的文件路径控制
 */
class FileInclusionVulnerability
{
    /**
     * 不安全的文件包含 - 无任何路径校验
     * 
     * Severity: SeverityLevel.CRITICAL
     * 
     * @param string $filepath 文件路径
     * @return mixed
     */
    public function unsafeInclude(string $filepath): mixed
    {
        // 危险：直接包含用户指定的文件，无任何校验
        return include($filepath);
    }
    /**
     * 弱校验文件包含 - 仅检查文件扩展名
     * 
     * Severity: SeverityLevel.HIGH
     * 
     * @param string $filepath 文件路径
     * @return mixed
     */
    public function weakInclude(string $filepath): mixed
    {
        // 危险：仅检查扩展名，仍可包含敏感文件
        if (!preg_match('/\.php$/', $filepath)) {
            return 'Invalid file type';
        }
        return include($filepath);
    }
    /**
     * 中等校验文件包含 - 检查路径遍历字符
     * 
     * Severity: SeverityLevel.MEDIUM
     * 
     * @param string $filepath 文件路径
     * @return mixed
     */
    public function mediumInclude(string $filepath): mixed
    {
        // 危险：检查部分路径遍历，但仍有绕过方法
        $dangerous_patterns = ['../', '..\\', 'php://', 'file://', 'data://'];
        foreach ($dangerous_patterns as $pattern) {
            if (strpos($filepath, $pattern) !== false) {
                return 'Path traversal detected';
            }
        }
        return include($filepath);
    }
    /**
     * 强校验文件包含 - 白名单文件验证
     * 
     * Severity: SeverityLevel.LOW
     * 
     * @param string $filepath 文件路径
     * @return mixed
     */
    public function strongInclude(string $filepath): mixed
    {
        // 相对安全：使用白名单验证
        $allowed_files = [
            'header.php', 'footer.php', 'config.php', 
            'functions.php', 'utils.php', 'common.php'
        ];
        $filename = basename($filepath);
        if (!in_array($filename, $allowed_files)) {
            return 'File not allowed';
        }
        $full_path = '/var/www/includes/' . $filename;
        if (!file_exists($full_path)) {
            return 'File not found';
        }
        return include($full_path);
    }
} 