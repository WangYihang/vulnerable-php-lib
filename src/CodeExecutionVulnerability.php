<?php

/**
 * CodeExecutionVulnerability - Code Execution
 * 
 * 代码执行漏洞演示，展示不同安全等级的表达式执行控制
 * 
 * Category: VulnerabilityCategory.INJECTION
 * Severity: SeverityLevel.CRITICAL
 * 
 * WARNING: This code contains intentional security vulnerabilities for educational purposes only.
 * DO NOT use this code in production environments.
 */

namespace Wangyihang\VulnerablePhpLib;

/**
 * Code Execution
 * 
 * 代码执行漏洞演示，展示不同安全等级的表达式执行控制
 */
class CodeExecutionVulnerability
{
    /**
     * 不安全的eval执行 - 无任何代码校验
     * 
     * Severity: SeverityLevel.CRITICAL
     * 
     * @param string $expression 要执行的表达式
     * @return mixed
     */
    public function unsafeEval(string $expression): mixed
    {
        // 危险：直接执行用户输入的代码，无任何校验
        return eval($expression);
    }
    /**
     * 弱校验eval执行 - 仅检查危险函数名
     * 
     * Severity: SeverityLevel.HIGH
     * 
     * @param string $expression 要执行的表达式
     * @return mixed
     */
    public function weakEval(string $expression): mixed
    {
        // 危险：仅检查部分危险函数，仍可执行恶意代码
        $dangerous_functions = ['system', 'exec', 'shell_exec', 'passthru'];
        foreach ($dangerous_functions as $func) {
            if (strpos($expression, $func) !== false) {
                return 'Dangerous function not allowed';
            }
        }
        return eval($expression);
    }
    /**
     * 中等校验eval执行 - 检查系统函数和文件操作
     * 
     * Severity: SeverityLevel.MEDIUM
     * 
     * @param string $expression 要执行的表达式
     * @return mixed
     */
    public function mediumEval(string $expression): mixed
    {
        // 危险：检查更多危险函数，但仍有绕过方法
        $dangerous_patterns = [
            '/system\s*\(/', '/exec\s*\(/', '/shell_exec\s*\(/', 
            '/file_get_contents\s*\(/', '/file_put_contents\s*\(/',
            '/unlink\s*\(/', '/rmdir\s*\(/', '/mkdir\s*\(/'
        ];
        foreach ($dangerous_patterns as $pattern) {
            if (preg_match($pattern, $expression)) {
                return 'Dangerous operation not allowed';
            }
        }
        return eval($expression);
    }
    /**
     * 强校验eval执行 - 白名单表达式验证
     * 
     * Severity: SeverityLevel.LOW
     * 
     * @param string $expression 要执行的表达式
     * @return mixed
     */
    public function strongEval(string $expression): mixed
    {
        // 相对安全：只允许数学表达式
        $allowed_patterns = [
            '/^[0-9\s\+\-\*\/\(\)\.]+$/',  // 纯数学表达式
            '/^[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)$/'  // 简单函数调用
        ];
        $allowed = false;
        foreach ($allowed_patterns as $pattern) {
            if (preg_match($pattern, $expression)) {
                $allowed = true;
                break;
            }
        }
        if (!$allowed) {
            return 'Expression not allowed';
        }
        return eval($expression);
    }
} 